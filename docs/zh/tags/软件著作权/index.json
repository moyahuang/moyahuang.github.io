[{"content":"论文引文信息（in Chicago） Zhang, Yuanyu, Shoji Kasahara, Yulong Shen, Xiaohong Jiang, and Jianxiong Wan. \u0026ldquo;Smart contract-based access control for the internet of things.\u0026rdquo; IEEE Internet of Things Journal 6, no. 2 (2018): 1594-1605.\n论文分析 论文概述 论文设计了三种类型的智能合约用于实现访问控制，分别作用如下：\n访问控制合约（ACC）：为每个主客体对创建一个智能合约\n仲裁合约（JC）：被ACC实例调用，用于获取对异常行为（i.e.频繁访问）的处罚（i.e.禁止访问时间）\n注册合约（RC）：注册ACC和JC的合约地址以及ABI\n三个合约之间的对应关系如下：\ngraph TB A(ACC1) -- register --\u0026gt; B(RC) C(ACC2) -- register --\u0026gt; B(RC) D(ACC3) -- register --\u0026gt; B(RC) E(...) -- register --\u0026gt; B(RC) F(JC) -- register --\u0026gt; B(RC) style F fill:#28AFB0 style B fill:#F4D35E graph TB A(ACC1) -- call --\u0026gt; F(JC) C(ACC2) -- call --\u0026gt; F(JC) D(ACC3) -- call --\u0026gt; F(JC) E(...) -- call --\u0026gt; F(JC) style F fill:#28AFB0 本文为每个资源都保存了一个异常行为记录，代码中用mapping[resource]保存，BehaviorItem表示，记录保存内容如下：\n   Misbehavior Time Penalty     Too frequent access 2020-12-16 21:00 blocked for 2 hours   Too frequent access 2020-12-16 21:30 blocked for 2 hours    源码分析 classDiagram class AccessControl { +address owner +address subject +address object Judge public jc struct Misbehavior struct BehaviorItem struct PolicyItem mapping[resource][action] policies mapping[resource] behaviors +AccessControlMethod(_subject) +setJC(_jc) +policyAdd(_resource, _action, _permission, _minInterval, _threshold) +getPolicy(string _resource, string _action) : (_permission, _minInterval, _threshold, _ToLR, _NoFR, _res, _errcode) +policyUpdate(string _resource, string _action, string _newPermission) +minIntervalUpdate(_resource, _action, _newMinInterval) +thresholdUpdate( _resource, _action, _newThreshold) +policyDelete(_resource, _action) +accessControl(_resource, _action, _time) -\u0026gt; emit +getTimeofUnblock(_resource) : (_penalty, _timeOfUnblock) +deleteACC() } AccessControl o-- Judge class Judge { +uint base +uint interval +address owner struct Misbehavior +mapping[subject] MisbehaviorList +Judge(_base, _interval) +misbehaviorJudge(_subject, _object, _res, _action, _misbehavior, _time) : penalty -\u0026gt; emit +getLatestMisbehavior(_key) : (_subject, _object, _res, _action, _misbehavior, _time) +self_destruct() } class Register{ struct Method +mapping[method] lookupTable +methodRegister(_methodName, _scname, _subject, _object, _creator, _scAddress, _abi) +methodScNameUpdate(_methodName, _scName) +methodAcAddressUpdate(_methodName, _scAddress) +methodAbiUpdate(_methodName, _abi) +methodNameUpdate(_oldName, _newName) +methodDelete(_name) +getContractAddr(_methodName) : _scAddressp +getContractAbi(_methodName) : _abi } 论文源代码 智能合约 Access Control Contract, one per subject-object pair\n\r\rACC\r\rpragma solidity ^0.4.0; contract AccessControlMethod{ address public owner; address public subject; address public object; Judge public jc; event ReturnAccessResult( address indexed _from, string _errmsg, bool _result, uint _time, uint _penalty ); struct Misbehavior{ string res; //resource on which the misbehavior is conducted  string action; //action (e.g., \u0026#34;read\u0026#34;, \u0026#34;write\u0026#34;, \u0026#34;execute\u0026#34;) of the misbehavior  string misbehavior; //misbehavior  uint time; //time of the misbehavior occured  uint penalty; //penalty opposed to the subject (number of minutes blocked)  } struct BehaviorItem{ //for one resource  Misbehavior [] mbs; //misbehavior list of the subject on a particular resource  uint TimeofUnblock; //time when the resource is unblocked (0 if unblocked; otherwise,blocked)  } struct PolicyItem{ //for one (resource, action) pair;  bool isValued; //for duplicate check  string permission; //permission: \u0026#34;allow\u0026#34; or \u0026#34;deny\u0026#34;  uint minInterval; //minimum allowable interval (in seconds) between two successive requests  uint ToLR; //Time of Last Request  uint NoFR; //Number of frequent Requests in a short period of time  uint threshold; //threshold on NoFR, above which a misbehavior is suspected  bool result; //last access result  uint8 err; //last err code  } mapping (bytes32 =\u0026gt; mapping(bytes32 =\u0026gt; PolicyItem)) policies; //mapping (resource, action) =\u0026gt;PolicyCriteria for policy check  mapping (bytes32 =\u0026gt; BehaviorItem) behaviors; //mapping resource =\u0026gt; BehaviorCriteria for behavior check  /*convert strings to byte32*/ function stringToBytes32(string _str) public constant returns (bytes32){ bytes memory tempBytes = bytes(_str); bytes32 convertedBytes; if(0 == tempBytes.length){ return 0x0; } assembly { convertedBytes := mload(add(_str, 32)) } return convertedBytes; } function AccessControlMethod(address _subject) public{ owner = msg.sender; object = msg.sender; subject = _subject; } function setJC(address _jc)public{ if(owner == msg.sender){ jc = Judge(_jc); } else throw; } function policyAdd(string _resource, string _action, string _permission, uint _minInterval, uint _threshold) public{ bytes32 resource = stringToBytes32(_resource); bytes32 action = stringToBytes32(_action); if(msg.sender == owner){ if(policies[resource][action].isValued) throw; //duplicated key  else{ policies[resource][action].permission = _permission; policies[resource][action].minInterval = _minInterval; policies[resource][action].threshold = _threshold; policies[resource][action].ToLR = 0; policies[resource][action].NoFR = 0; policies[resource][action].isValued = true; policies[resource][action].result = false; behaviors[resource].TimeofUnblock = 0; } } else throw; } function getPolicy(string _resource, string _action) public constant returns (string _permission, uint _minInterval, uint _threshold, uint _ToLR, uint _NoFR, bool _res, uint8 _errcode){ bytes32 resource = stringToBytes32(_resource); bytes32 action = stringToBytes32(_action); if(policies[resource][action].isValued){ _permission = policies[resource][action].permission; _minInterval = policies[resource][action].minInterval; _threshold = policies[resource][action].threshold; _NoFR = policies[resource][action].NoFR; _ToLR = policies[resource][action].ToLR; _res = policies[resource][action].result; _errcode = policies[resource][action].err; } else throw; } function policyUpdate(string _resource, string _action, string _newPermission) public{ bytes32 resource = stringToBytes32(_resource); bytes32 action = stringToBytes32(_action); if(policies[resource][action].isValued){ policies[resource][action].permission = _newPermission; } else throw; } function minIntervalUpdate(string _resource, string _action, uint _newMinInterval) public{ bytes32 resource = stringToBytes32(_resource); bytes32 action = stringToBytes32(_action); if(policies[resource][action].isValued){ policies[resource][action].minInterval= _newMinInterval; } else throw; } function thresholdUpdate(string _resource, string _action, uint _newThreshold) public{ bytes32 resource = stringToBytes32(_resource); bytes32 action = stringToBytes32(_action); if(policies[resource][action].isValued){ policies[resource][action].threshold= _newThreshold; } else throw; } function policyDelete(string _resource, string _action) public{ bytes32 resource = stringToBytes32(_resource); bytes32 action = stringToBytes32(_action); if(msg.sender == owner){ if(policies[resource][action].isValued){ delete policies[resource][action]; } else throw; } else throw; } /*Use event*/ function accessControl(string _resource, string _action, uint _time) public{ bool policycheck = false; bool behaviorcheck = true; uint8 errcode = 0; uint penalty = 0; if (msg.sender == subject){ bytes32 resource = stringToBytes32(_resource); bytes32 action = stringToBytes32(_action); if(behaviors[resource].TimeofUnblock \u0026gt;= _time){//still blocked state  errcode = 1; //\u0026#34;Requests are blocked!\u0026#34;  } else{//unblocked state  if(behaviors[resource].TimeofUnblock \u0026gt; 0){ behaviors[resource].TimeofUnblock = 0; policies[resource][action].NoFR = 0; policies[resource][action].ToLR = 0; } //policy check  if (keccak256(\u0026#34;allow\u0026#34;) == keccak256(policies[resource][action].permission)){ policycheck = true; } else{ policycheck = false; } //behavior check  if (_time - policies[resource][action].ToLR \u0026lt;= policies[resource][action].minInterval){ policies[resource][action].NoFR++; if(policies[resource][action].NoFR \u0026gt;= policies[resource][action].threshold){ penalty = jc.misbehaviorJudge(subject, object, _resource, _action, \u0026#34;Too frequent access!\u0026#34;, _time); behaviorcheck = false; behaviors[resource].TimeofUnblock = _time + penalty * 1 minutes; behaviors[resource].mbs.push(Misbehavior(_resource, _action, \u0026#34;Too frequent access!\u0026#34;, _time, penalty));//problem occurs when using array  } } else{ policies[resource][action].NoFR = 0; } if(!policycheck \u0026amp;\u0026amp; behaviorcheck) errcode = 2; //\u0026#34;Static Check failed!\u0026#34;  if(policycheck \u0026amp;\u0026amp; !behaviorcheck) errcode = 3; //\u0026#34;Misbehavior detected!\u0026#34;  if(!policycheck \u0026amp;\u0026amp; !behaviorcheck) errcode = 4; //\u0026#34;Static check failed! \u0026amp; Misbehavior detected!\u0026#34;;  } policies[resource][action].ToLR = _time; } else { errcode = 5; //\u0026#34;Wrong object or subject detected!\u0026#34;;  } policies[resource][action].result = policycheck \u0026amp;\u0026amp; behaviorcheck; policies[resource][action].err = errcode; if(0 == errcode) ReturnAccessResult(msg.sender, \u0026#34;Access authorized!\u0026#34;, true, _time, penalty); if(1 == errcode) ReturnAccessResult(msg.sender, \u0026#34;Requests are blocked!\u0026#34;, false, _time, penalty); if(2 == errcode) ReturnAccessResult(msg.sender, \u0026#34;Static Check failed!\u0026#34;, false, _time, penalty); if(3 == errcode) ReturnAccessResult(msg.sender, \u0026#34;Misbehavior detected!\u0026#34;, false, _time, penalty); if(4 == errcode) ReturnAccessResult(msg.sender, \u0026#34;Static check failed! \u0026amp; Misbehavior detected!\u0026#34;, false, _time, penalty); if(5 == errcode) ReturnAccessResult(msg.sender, \u0026#34;Wrong object or subject specified!\u0026#34;, false, _time, penalty); } function getTimeofUnblock(string _resource) public constant returns(uint _penalty, uint _timeOfUnblock){ bytes32 resource= stringToBytes32(_resource); _timeOfUnblock = behaviors[resource].TimeofUnblock; uint l = behaviors[resource].mbs.length; _penalty = behaviors[resource].mbs[l - 1].penalty; } function deleteACC() public{ if(msg.sender == owner){ selfdestruct(this); } } } contract Judge{ function misbehaviorJudge(address _subject, address _object, string _res, string _action, string _misbehavior, uint _time) public returns (uint ); }   \r\r\nJudge Contract, called by ACC(s) to judge the misbehavior of subjects and return the corresponding penalty\n\r\rJC\r\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  pragma solidity ^0.4.0; contract Judge{ uint public base; uint public interval; address public owner; event isCalled(address _from, uint _time, uint _penalty); struct Misbehavior{ address subject; //subject who performed the misbehavior;  address object; //  string res; //  string action; //action (e.g., \u0026#34;read\u0026#34;, \u0026#34;write\u0026#34;, \u0026#34;execute\u0026#34;) of the misbehavior  string misbehavior; //misbehavior  uint time; //time of the Misbehavior occured  uint penalty; //penalty (number of minitues blocked);  } mapping (address =\u0026gt; Misbehavior[]) public MisbehaviorList; function Judge (uint _base, uint _interval) public{ base = _base; interval = _interval; owner = msg.sender; } function misbehaviorJudge(address _subject, address _object, string _res, string _action, string _misbehavior, uint _time) public returns (uint penalty){ //misbehaviorJudge(msb);  uint length = MisbehaviorList[_subject].length + 1; uint n = length/interval; penalty = base**n; MisbehaviorList[_subject].push(Misbehavior(_subject, _object, _res, _action, _misbehavior, _time, penalty)); isCalled(msg.sender,_time, penalty); } function getLatestMisbehavior(address _key) public constant returns (address _subject, address _object, string _res, string _action, string _misbehavior, uint _time){ uint latest = MisbehaviorList[_key].length - 1; //uint latest = 0;  _subject = MisbehaviorList[_key][latest].subject; _object = MisbehaviorList[_key][latest].object; _res = MisbehaviorList[_key][latest].res; _action = MisbehaviorList[_key][latest].action; _misbehavior = MisbehaviorList[_key][latest].misbehavior; _time = MisbehaviorList[_key][latest].time; } function self_destruct() public{ if(msg.sender == owner){ selfdestruct(this); } } }   \r\r\nRegister Contract, registering required information, such contract address and ABI for interacting with the ACCs and JC\n\r\rRC\r\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85  pragma solidity ^0.4.0; contract Register{ struct Method{ string scName; //contract name  address subject; //the subject of the corresponding subject-object pair of the ACC; for the JC, this filed is left blank;  address object; //the subject of the corresponding subject-object pair of the ACC; for the JC, this filed is left blank;  address creator; //the peer (account) who created and deployed this contract;  address scAddress; //the address of the contract;  bytes abi; //the Abifs provided by the contract.  } /*As solidity cannot allow dynamically-sized value as the Key, we use the fixed-szie byte32 type as the keytype*/ mapping (bytes32=\u0026gt; Method) public lookupTable; /*convert strings to byte32*/ function stringToBytes32(string _str) public constant returns (bytes32){ bytes memory tempBytes = bytes(_str); bytes32 convertedBytes; if(0 == tempBytes.length){ return 0x0; } assembly { convertedBytes := mload(add(_str, 32)) } return convertedBytes; } /*register an access control contract (ACC)*/ function methodRegister(string _methodName, string _scname, address _subject, address _object, address _creator, address _scAddress, bytes _abi) public { //no duplicate check  bytes32 newKey = stringToBytes32(_methodName); lookupTable[newKey].scName = _scname; lookupTable[newKey].subject = _subject; lookupTable[newKey].object = _object; lookupTable[newKey].creator = _creator; lookupTable[newKey].scAddress = _scAddress; lookupTable[newKey].abi = _abi; } /*update the ACC information (i.e., scname, scAddress, abi) of an exisiting method specified by the _methodName*/ function methodScNameUpdate(string _methodName, string _scName) public{ bytes32 key = stringToBytes32(_methodName); lookupTable[key].scName = _scName; } function methodAcAddressUpdate(string _methodName, address _scAddress) public{ bytes32 key = stringToBytes32(_methodName); lookupTable[key].scAddress = _scAddress; } function methodAbiUpdate(string _methodName, bytes _abi) public{ bytes32 key = stringToBytes32(_methodName); lookupTable[key].abi = _abi; } /*update the name (_oldname) of an exisiting method with a new name (_newname) */ function methodNameUpdate(string _oldName, string _newName) public{ bytes32 oldKey = stringToBytes32(_oldName); bytes32 newKey = stringToBytes32(_newName); lookupTable[newKey].scName = lookupTable[oldKey].scName; lookupTable[newKey].subject = lookupTable[oldKey].subject; lookupTable[newKey].object = lookupTable[oldKey].object; lookupTable[newKey].creator = lookupTable[oldKey].creator; lookupTable[newKey].scAddress = lookupTable[oldKey].scAddress; lookupTable[newKey].abi = lookupTable[oldKey].abi; delete lookupTable[oldKey]; } function methodDelete(string _name) public{ delete lookupTable[stringToBytes32(_name)]; } function getContractAddr(string _methodName) public constant returns (address _scAddress){ bytes32 key = stringToBytes32(_methodName); _scAddress = lookupTable[key].scAddress; } function getContractAbi(string _methodName) public constant returns (bytes _abi){ bytes32 key = stringToBytes32(_methodName); _abi = lookupTable[key].abi; } }   \r\r\nJavaScript Registering an ACC in the JC\n\r\raccess_monitor.js\r\rvar Web3 = require(\u0026#39;web3\u0026#39;); var web3 = new Web3(new Web3.providers.HttpProvider(\u0026#34;http://localhost:8545\u0026#34;)); var regAddr = \u0026#34;0xddf27a729d05be6f11be50b1905daa6e7b508c91\u0026#34;; var regAbi = [ { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_str\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;stringToBytes32\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes32\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes32\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;lookupTable\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;scName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;subject\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;creator\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;getContractAddr\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;getContractAbi\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodAbiUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodAcAddressUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_name\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodDelete\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_oldName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_newName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodNameUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scname\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_subject\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_object\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_creator\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodRegister\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodScNameUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; } ] var methodName = \u0026#34;Method1\u0026#34;; var register = web3.eth.contract(regAbi).at(regAddr); var accAddr = register.getContractAddr(methodName); var accAbiBytes = register.getContractAbi(methodName); var accAbi = JSON.parse(web3.toAscii(accAbiBytes)); var myACC = web3.eth.contract(accAbi).at(accAddr); var myEvent = myACC.ReturnAccessResult({fromBlock: 0, toBlock: \u0026#39;latest\u0026#39;}); myEvent.watch(function(err, result){ if(!err){ //console.log(result); \tconsole.log(\u0026#34;Contract: \u0026#34;+result.address); console.log(\u0026#34;Block Number: \u0026#34; + result.blockNumber); console.log(\u0026#34;Tx Hash: \u0026#34; + result.transactionHash); console.log(\u0026#34;Block Hash: \u0026#34;+ result.blockHash); console.log(\u0026#34;Subject: \u0026#34;+ result.args._from); console.log(\u0026#34;Time: \u0026#34; + result.args._time.toNumber()); console.log(\u0026#34;Message: \u0026#34; + result.args._errmsg); console.log(\u0026#34;Result: \u0026#34; + result.args._result); if (result.args._penalty \u0026gt; 0) console.log(\u0026#34;Requests are blocked for \u0026#34; + result.args._penalty + \u0026#34; minutes!\u0026#34;); console.log(\u0026#34;\\n\u0026#34;); } })   \r\r\nRetrieving the required information of an ACC and sending access reqeusts to this ACC for access control\n\r\raccess_request.js\r\rvar Web3 = require(\u0026#39;web3\u0026#39;); var web3 = new Web3(new Web3.providers.HttpProvider(\u0026#34;http://localhost:8545\u0026#34;)); var subject = \u0026#34;0x0d1f8a489b1312689f11f7fe79dfc3b61ffa4160\u0026#34;; var regAddr = \u0026#34;0xddf27a729d05be6f11be50b1905daa6e7b508c91\u0026#34;; var regAbi = [ { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_str\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;stringToBytes32\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes32\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes32\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;lookupTable\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;scName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;subject\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;creator\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;getContractAddr\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;getContractAbi\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodAbiUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodAcAddressUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_name\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodDelete\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_oldName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_newName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodNameUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scname\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_subject\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_object\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_creator\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodRegister\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodScNameUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; } ]; var methodName = \u0026#34;Method1\u0026#34;; var register = web3.eth.contract(regAbi).at(regAddr); var accAddr = register.getContractAddr(methodName); var accAbiBytes = register.getContractAbi(methodName); var accAbi = JSON.parse(web3.toAscii(accAbiBytes)); var myACC = web3.eth.contract(accAbi).at(accAddr); var myEvent = myACC.ReturnAccessResult({_from: subject},{from: \u0026#39;latest\u0026#39;}); var previousTxHash = 0; var currentTxHash = 0; const readline = require(\u0026#39;readline\u0026#39;); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); rl.setPrompt(\u0026#39;Send access request?(y/n)\u0026#39;); rl.prompt(); rl.on(\u0026#39;line\u0026#39;, (answer) =\u0026gt; { if(\u0026#39;y\u0026#39; == answer) { var currentTime = new Date().getTime()/1000; currentTxHash = myACC.accessControl.sendTransaction(\u0026#34;File A\u0026#34;, \u0026#34;write\u0026#34;, currentTime, {from: web3.eth.accounts[0]}); myEvent.watch(function(err, result){ if(!err){ if(previousTxHash != result.transactionHash \u0026amp;\u0026amp; currentTxHash == result.transactionHash){//avoid dupicate event captured  console.log(\u0026#34;Contract: \u0026#34;+result.address); console.log(\u0026#34;Block Number: \u0026#34; + result.blockNumber); console.log(\u0026#34;Tx Hash: \u0026#34; + result.transactionHash); console.log(\u0026#34;Block Hash: \u0026#34;+ result.blockHash); console.log(\u0026#34;Time: \u0026#34; + result.args._time.toNumber()); console.log(\u0026#34;Message: \u0026#34; + result.args._errmsg); console.log(\u0026#34;Result: \u0026#34; + result.args._result); if (result.args._penalty \u0026gt; 0) console.log(\u0026#34;Requests are blocked for \u0026#34; + result.args._penalty + \u0026#34; minutes!\u0026#34;); console.log(\u0026#39;\\n\u0026#39;); previousTxHash = result.transactionHash; rl.prompt(); } } }); } else{ console.log(\u0026#34;Ummmmm....\u0026#34;); rl.prompt(); } }); rl.on(\u0026#39;close\u0026#39;, function() { console.log(\u0026#39;Have a great day!\u0026#39;); process.exit(0); });   \r\r\nCalled by an object to watch the deployed ACC and retrive the access result when an access reqeust comes\n\r\rregisterACC.js\r\rvar Web3 = require(\u0026#39;web3\u0026#39;); var web3 = new Web3(new Web3.providers.HttpProvider(\u0026#34;http://localhost:8545\u0026#34;)); var regAddr = \u0026#34;0xddf27a729d05be6f11be50b1905daa6e7b508c91\u0026#34;; var regAbi = [ { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_str\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;stringToBytes32\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes32\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes32\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;lookupTable\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;scName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;subject\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;creator\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;getContractAddr\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;getContractAbi\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodAbiUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodAcAddressUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_name\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodDelete\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_oldName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_newName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodNameUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scname\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_subject\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_object\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_creator\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scAddress\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_abi\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodRegister\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_methodName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_scName\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;methodScNameUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; } ]; var register = web3.eth.contract(regAbi).at(regAddr); var _methodName = \u0026#34;1\u0026#34;; var _scName = \u0026#34;2\u0026#34;; var _subject = \u0026#34;0x0d1f8a489b1312689f11f7fe79dfc3b61ffa4160\u0026#34;; var _object = \u0026#34;0x0d1f8a489b1312689f11f7fe79dfc3b61ffa4160\u0026#34;; var _creator = \u0026#34;0x0d1f8a489b1312689f11f7fe79dfc3b61ffa4160\u0026#34;; var _scAddr = \u0026#34;0x0d1f8a489b1312689f11f7fe79dfc3b61ffa4160\u0026#34;; var _abi = [ { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;subject\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_jc\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;setJC\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_resource\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_action\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;getPolicy\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_permission\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_minInterval\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_threshold\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_ToLR\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_NoFR\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_res\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bool\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_errcode\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint8\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;jc\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_resource\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_action\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;policyDelete\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;owner\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_resource\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_action\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_newThreshold\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;thresholdUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_resource\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;getTimeofUnblock\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_penalty\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_timeOfUnblock\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_resource\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_action\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_permission\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_minInterval\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_threshold\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;policyAdd\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_resource\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_action\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_newMinInterval\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;minIntervalUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_resource\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_action\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_time\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;accessControl\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: true, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_str\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;stringToBytes32\u0026#34;, \u0026#34;outputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bytes32\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;view\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_resource\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_action\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;_newPermission\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;policyUpdate\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;constant\u0026#34;: false, \u0026#34;inputs\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;deleteACC\u0026#34;, \u0026#34;outputs\u0026#34;: [], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;function\u0026#34; }, { \u0026#34;inputs\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;_subject\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; } ], \u0026#34;payable\u0026#34;: false, \u0026#34;stateMutability\u0026#34;: \u0026#34;nonpayable\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;constructor\u0026#34; }, { \u0026#34;anonymous\u0026#34;: false, \u0026#34;inputs\u0026#34;: [ { \u0026#34;indexed\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;_from\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;address\u0026#34; }, { \u0026#34;indexed\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;_errmsg\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, { \u0026#34;indexed\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;_result\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;bool\u0026#34; }, { \u0026#34;indexed\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;_time\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; }, { \u0026#34;indexed\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;_penalty\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;uint256\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;ReturnAccessResult\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;event\u0026#34; } ] register.methodRegister.sendTransaction(_methodName, _scName, _subject, _object, _creator, _scAddr, _abi, {from:web3.eth.coinbase, gas:3000000});   \r\r\n参考文献 [1] 源代码GitHub仓库\n[2] 论文链接\n","description":"","id":0,"section":"posts","tags":["学术","区块链","智能合约"],"title":"复现《Smart Contract Based Access Control for the Internet of Things》","uri":"https://moyahuang.github.io/zh/posts/%E5%A4%8D%E7%8E%B0smart-contract-based-access-control-for-the-internet-of-things/"},{"content":"Intro  Solidity   Solidity 是一门面向合约的、为实现智能合约而创建的高级编程语言。这门语言受到了 C++，Python 和 Javascript 语言的影响，设计的目的是能在以太坊虚拟机（EVM）上运行。\n  Remix   基于浏览器的 IDE，集成了编译器和 Solidity 运行时环境，不需要服务端组件。\nMetaMask\nMetaMask是通过浏览器访问分布式应用（dapps）的一个Chrome插件。可访问以太坊主网，任一以太坊测试网（Ropsten, Kovan, and Rinkeby），或者本地区块链。\n  Geth   Geth是Go Ethereum的缩写，是以太坊协议的三大原始实现之一（另外还有C++和Python），也是最受欢迎的客户端实现。它可以作为客户端运行在几乎任一操作系统上。安装了客户端的节点可以与其他节点建立p2p通信信道，签署和广播交易，挖掘，部署和与智能合约交互。\n启动Geth时，客户端会自动在端口8545启动RPC服务器。然后使用web3j等库连接到localhost：8545或使用curl或wget手动调用它来访问此端口的RPC服务器及其方法。\n 简单的智能合约  Solidity第一行使用关键词pragma指定使用哪个版本编译器处理源代码。 event事件类型可以让监听该事件的listener收到通知，方便事务追踪。\n下面这个示例定义了一个事件，放在需要监听的函数最后执行：  1 2 3 4 5 6 7  event Sent(address from, address to, uint amount); function send(address receiver, uint amount) public { if (balances[msg.sender] \u0026lt; amount) return; balances[msg.sender] -= amount; balances[receiver] += amount; emit Sent(msg.sender, receiver, amount); }   该事件可这样被监听:\n1 2 3 4 5 6 7 8 9 10  Coin.Sent().watch({}, \u0026#39;\u0026#39;, function(error, result) { if (!error) { console.log(\u0026#34;Coin transfer: \u0026#34; + result.args.amount + \u0026#34; coins were sent from \u0026#34; + result.args.from + \u0026#34; to \u0026#34; + result.args.to + \u0026#34;.\u0026#34;); console.log(\u0026#34;Balances now:\\n\u0026#34; + \u0026#34;Sender: \u0026#34; + Coin.balances.call(result.args.from) + \u0026#34;Receiver: \u0026#34; + Coin.balances.call(result.args.to)); } })   事件的参数可以通过上述回调函数的第二个参数的属性args访问，本例为result.args。\n3. 全局变量msg,tx,block保存一些区块链的属性，其中msg.sender永远指向访问当前函数的来源地址（在构造函数中，msg.sender指向智能合约的创建者）\n区块链基础 transaction\ngeth安装 下载\n1  wget https://gethstore.blob.core.windows.net/builds/geth-alltools-linux-amd64-1.9.6-bd059680.tar.gz   解压缩\n1  tar zxvf https://gethstore.blob.core.windows.net/builds/geth-alltools-linux-amd64-1.9.6-bd059680.tar.gz   配置环境变量\n 文件夹改名 配置环境变量，检验方式which geth是否输出geth路径 编辑配置文件，保证下次仍可以找到该环境变量，检验方式如上  1 2 3  mv geth-alltools-linux-amd64-1.9.6-bd059680 ~/geth-home export PATH=$HOME/geth-home:$PATH echo `export PATH=$HOME/geth-home:$PATH` \u0026gt;\u0026gt; ~/.bashrc   NOTE:\n区块链开发最好用类unix系统，如ubuntu、Mac，否则可能不太稳定。如果是windows电脑可以选择用虚拟机或者双系统。\ngeth启动 1.在geth启动目录下创建文件genesis.json，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;config\u0026#34;: { \u0026#34;chainId\u0026#34;: 18, \u0026#34;homesteadBlock\u0026#34;: 0, \u0026#34;eip150Block\u0026#34;: 0, \u0026#34;eip155Block\u0026#34;: 0, \u0026#34;eip158Block\u0026#34;: 0 }, \u0026#34;alloc\u0026#34; : {}, \u0026#34;coinbase\u0026#34; : \u0026#34;0x0000000000000000000000000000000000000000\u0026#34;, \u0026#34;difficulty\u0026#34; : \u0026#34;0x2\u0026#34;, \u0026#34;extraData\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;gasLimit\u0026#34; : \u0026#34;0xffffffff\u0026#34;, \u0026#34;nonce\u0026#34; : \u0026#34;0x0000000000000042\u0026#34;, \u0026#34;mixhash\u0026#34; : \u0026#34;0x0000000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;parentHash\u0026#34; : \u0026#34;0x0000000000000000000000000000000000000000000000000000000000000000\u0026#34;, \u0026#34;timestamp\u0026#34; : \u0026#34;0x00\u0026#34; }   步骤01：利用创世块文件初始化\n1  geth init genesis.json --datadir ./data   此时在data文件夹下生成了一些文件\n步骤02：启动geth节点\n1  geth --datadir ./data --networkid 18 --port 30303 --rpc --rpcport 8545 --rpcapi \u0026#39;db,net,eth,web3,personal\u0026#39; --rpccorsdomain \u0026#34;*\u0026#34; --gasprice 0 --allow-insecure-unlock console 2\u0026gt; 1.log   note:\n官方教程推荐使用clef工具进行账户管理，具体步骤可参见\n参考教程 [1]柏链公开课：第五期 Geth的安装\n[2]讲师github：Geth安装与启动\n[3]Remix IDE官方文档\n[4]Solidity官方文档\n[5]链门户：Geth介绍及如何运行以太坊节点\n","description":"","id":1,"section":"posts","tags":["学术","区块链","智能合约"],"title":"区块链开发","uri":"https://moyahuang.github.io/zh/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91/"},{"content":"Smart Contract ⚠️[truffle init]Error: Error making request to https://raw.githubusercontent.com\u0026hellip;\ndate: 2020/12/11\ndescription:\n√ Preparing to download\r× Downloading\rError: Error: Error: Error making request to https://raw.githubusercontent.com/truffle-box/bare-box/master/truffle-box.json. Got error: read ECONNRESET. Please check the format of the requested resource.\rat Object.unbox (C:\\Users\\w\\AppData\\Roaming\\npm\\node_modules\\truffle\\build\\webpack:\\packages\\truffle-box\\box.js:65:1)\rat processTicksAndRejections (internal/process/task_queues.js:97:5)\rTruffle v5.0.2 (core: 5.0.2)\rNode v12.18.3\rsolution: 修改hosts\n 打开C:\\windows\\system32\\drivers\\etc 在hosts文件中增加199.232.68.133 raw.githubusercontent.com  raw.githubusercontent.com的ip地址可以在以下或其他网站查询，没有则可以另外谷歌：\nhttps://www.ipaddress.com/\n⚠️[truffle develop]PSSecurityException\ndate: 2020/12/11\ndescription:\n息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。\r所在位置 行:1 字符: 1\r+ truffle develop\r+ ~~~~~~~\r+ CategoryInfo : SecurityError: (:) []，PSSecurityException\r+ FullyQualifiedErrorId : UnauthorizedAccess\rsolution: 更改开发者选项\n windows搜索并打开开发者设置 点击标签powershell的应用\n问题解决  ","description":"","id":2,"section":"posts","tags":["踩坑","开发"],"title":"走过的路都将成为财富之Debugging大合集","uri":"https://moyahuang.github.io/zh/posts/%E8%B5%B0%E8%BF%87%E7%9A%84%E8%B7%AF%E9%83%BD%E5%B0%86%E6%88%90%E4%B8%BA%E8%B4%A2%E5%AF%8C%E4%B9%8Bdebugging%E5%A4%A7%E5%90%88%E9%9B%86/"},{"content":"// todo\n","description":"","id":3,"section":"posts","tags":["分类恐惧症"],"title":"技术合同登记","uri":"https://moyahuang.github.io/zh/posts/%E6%8A%80%E6%9C%AF%E5%90%88%E5%90%8C%E7%99%BB%E8%AE%B0/"},{"content":"偶尔画画的一些痕迹\n","description":"art gallery","id":4,"section":"gallery","tags":null,"title":"Art","uri":"https://moyahuang.github.io/zh/gallery/art/"},{"content":" Français\n\u0026ldquo;Il n\u0026rsquo;ya qu\u0026rsquo;un héroïsme au monde：c\u0026rsquo;est de voir le monde tel qu\u0026rsquo;il est et de l\u0026rsquo;aimer.\u0026quot;\nEnglish\n\u0026ldquo;There\u0026rsquo;s only one heroism in the world: to know the world as it is, and to love it.\u0026quot;\n中文\n“世上只有一种英雄主义，就是在看清生活真相之后仍然热爱生活。”\n\u0026ndash; Romain Rolland\n  “I just feel like women, they have minds, and they have souls, as well as just hearts. And they\u0026rsquo;ve got ambition, and they\u0026rsquo;ve got talent, as well as just beauty. I\u0026rsquo;m so sick of people saying that love is all a woman is fit for.”\nLittle Women\n ","description":"","id":5,"section":"posts","tags":["能量瓶"],"title":"那些话曾经给我力量","uri":"https://moyahuang.github.io/zh/posts/%E9%82%A3%E4%BA%9B%E8%AF%9D%E6%9B%BE%E7%BB%8F%E7%BB%99%E6%88%91%E5%8A%9B%E9%87%8F/"},{"content":"一则\n弦子曾经是央视《艺术人生》栏目的一名实习生。她在2018年7月写长文曝光了四年前被央视主持人朱军性骚扰自己的经历。我印象中看过这篇文章，内容记不太清楚了。2018年底，弦子把朱军告上法庭，决定诉诸法律维护自己的权力。终于，这个案子在昨天（2020年12月2日）开庭了。法院门口聚集了很多年轻人为她加油，给她鼓励。原来两年间，包括她在内的一个志愿者团队一直通过各种方式帮助受过性侵或者性骚扰的受害者。致敬温柔且勇敢的女性。\n弦子与她的朋友们:\r\r 二则\n早晨在郭家桥北街的煎饼果子店买煎饼果子。以前这个饼店只有中青年两个男人。今天突然多了一个中年女人，化着淡妆，看着很有气质，不时用山东味儿的口音和操着四川话路过的熟人说着只有他们才知道的话题。我厚着脸皮跟她多要了一片生菜。她不仅爽快地答应了，还特意给我在铁板上热了一下才包进去，说“女生要吃热乎些”。\n关于郭家桥北街\n郭家桥北街挨近川大南门，地图上看刚好是成都1.5环的位置，是一条有着独特韵味和温度的街道。面馆、奶茶店、菜市场、诊所、网吧、文具店、小卖部、花店\u0026hellip;自从放开路边摊经济之后，这里更加应有尽有了，糖葫芦、章鱼烧、蛋烘糕、家居、古玩、书摊、水果铺\u0026hellip;不管是清洁工大妈、外卖小哥、小店老板、公司职员还是学生、退休大爷大妈、大学教授都能在这里找到自己的位置。\n成都随处可见的卖鞋垫的奶奶:\r\r\n穿着黄色西装 梳着猫王发型的大爷:\r\r\n正经糖葫芦:\r\r\n早上喧哗的郭家桥北街:\r\r\n","description":"","id":6,"section":"posts","tags":["一缕阳光"],"title":"女性对女性的温柔小记\u0026关于郭家桥北街","uri":"https://moyahuang.github.io/zh/posts/%E5%A5%B3%E6%80%A7%E5%AF%B9%E5%A5%B3%E6%80%A7%E7%9A%84%E6%B8%A9%E6%9F%94%E5%B0%8F%E8%AE%B0%E5%85%B3%E4%BA%8E%E9%83%AD%E5%AE%B6%E6%A1%A5%E5%8C%97%E8%A1%97/"},{"content":"下文原名为《西南版权中心申请软著注意事项》，作者为Echo（非本人）。内容根据2020年10月15日至12月1日共6次现场办理软件著作权（预计要去7次）的材料出错细节，希望以后的软著申请办理可以引以为戒。\n西南版权中心申请软著注意事项 1. 前期注意事项 1）材料准备：营业执照复印件（加盖公章），预约人身份证复印件，申请表（加盖公章），源代码文件，说明书文件。\n2）检查系统与打印资料的对应情况：程序代码行数是否对应，编程语言，源文件是否上传错误，页眉与标题是否一致，图片copyright@写公司名字、截图不能侵犯版权，流水号是否一致。\n3）西南版权中心电话：028-87353161。\n2. 6次现场办理出错细节 1）共9份材料，其中4份过关，4份材料错误，1份未预约上。\n材料错误：程序代码行数不对应、页眉与标题不一致，图片copyright@没写公司名字、截图侵犯版权；工作人员发放补正通知书，需按要求修改材料后再次递交。\n未预约上：需要预约成功再去现场办理。\n2）共5份材料，都不过关，因为未预约。\n未预约：在预约界面上找不到项目，后来知道原因是系统上未按照补正意见修改并提交。\n3）共5份材料，其中1项过关，1项预约人错误，3份系统上未按补正意见修改并提交。\n预约人错误：需要修改预约人。\n系统上未按照补正意见修改并提交：有的源文件不对，代码量不对。\n4）共4份材料，其中1项过关，2项重复登记，1项程序语言写错。\n重复登记：已经登记的项目不能重复登记，应该使用以前登记的项目。\n语言写错：python写成java。\n5）共3份材料，其中2项过关，1项代码量未修改（办公电话一直打不通、未开权限）。\n6）共1份材料。预约12.7去办理，目测应该过关。\n2020.11.30\n软件著作权写作和申请还有很多小细节，但是时间和精力有限暂不加以补充。\n","description":"","id":7,"section":"posts","tags":["踩坑","软件著作权"],"title":"软件著作权申请实录","uri":"https://moyahuang.github.io/zh/posts/%E8%BD%AF%E4%BB%B6%E8%91%97%E4%BD%9C%E6%9D%83%E7%94%B3%E8%AF%B7%E5%AE%9E%E5%BD%95/"},{"content":"温暖而又平凡的过往\n","description":"定格","id":8,"section":"gallery","tags":null,"title":"Photo","uri":"https://moyahuang.github.io/zh/gallery/photo/"},{"content":"本站为莫莫哒的博客2.0, 重建于2020年12月1日。创建目的在于记录自己的学习历程，整理自己的一些思考，以及保存一些需要公开访问路径的内容。莫莫哒本人认为无论是学习还是生活，都需要留下一些痕迹，且尝试过日记，手账，剪贴簿，手机自带备忘录，语音日记，日记软件，包括微博、豆瓣、微信等社交软件。未来也不排除在这里记录一些生活和兴趣爱好相关的内容。\nThis website is recreated in Dec. 1, 2020, for I personally like dark themes better these days. And I would like to give a thumbs up to the theme designer.\nI planned to migrate previous posts from Hexo-powered project to this brand new Hugo-powered project. But the migration task had been proven tedious and meaningless after I saved those pages to my Evernote.\nI hope this website would be long maintained by myself. For furter instruction on this theme, please refer to Hugo and 📝\n","description":"Moya Huang's personal website, Miao Huang, 黄苗, 四川大学, 四川师范大学, 前端","id":9,"section":"","tags":null,"title":"关于","uri":"https://moyahuang.github.io/zh/about/"},{"content":"概念 工业互联网 工业互联网是链接工业全系统、全产业链、全价值链，支撑工业智能化发展的关键基础设施，是新一代信息技术与制造业深度融合所形成的新兴业态和应用模式，是互联网从消费领域向生产领域、从虚拟经济向实体经济拓展的核心载体。\n虚拟经济 虚拟经济（Fictitious Economy）是相对实体经济而言的，是经济虚拟化（西方称之为“金融深化”Financial deepening）的必然产物。经济的本质是一套价值系统，包括物质价格系统和资产价格系统。与由成本和技术支撑定价的物质价格系统不同，资产价格系统是以资本化定价方式为基础的一套特定的价格体系，这也就是虚拟经济。由于资本化定价，人们的心理因素会对虚拟经济产生重要的影响；这也就是说，虚拟经济在运行上具有内在的波动性。广义地讲，虚拟经济除了目前研究较为集中的金融业、房地产业，还包括体育经济、博彩业、收藏业等，虚拟经济发展过度将会带来泡沫经济[2]。\n架构(architecture) vs. 模型(model) vs. 框架(framework) scheme schema model architecture framework\n参考文献 [1] 工业互联网是什么\n[2] “虚拟经济”百度百科词条\n","description":"","id":12,"section":"posts","tags":["分类恐惧症"],"title":"工业互联网小百科","uri":"https://moyahuang.github.io/zh/posts/%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%B0%8F%E7%99%BE%E7%A7%91/"},{"content":"冒泡排序 算法思想： 从数列第一个元素R1开始，与邻近元素R2进行比较，若R1\u0026gt;R2，则交换；同理，依次比较R2R3R4R5…，经过一趟比较，最大的数被交换到数列尾端。从数列第一个元素到数列倒数第二个元素，用内层循环表示。\n对除上述父数列的尾端元素的子数列重复上述操作。子数列尾端下标不断减小，用外层循环表示。\nJavaScript代码实现 1 2 3 4 5 6 7 8 9 10  function bubbleSort(nums){ for(var end=nums.length-1; end\u0026gt;0;end--){ for(var i=0; i\u0026lt;end;i++){ if(nums[i]\u0026gt;nums[i+1]){ [nums[i],nums[i+1]]=[nums[i+1],nums[i]]; } } } return nums; }   选择排序 算法思想： 在数列第一个元素依次开始遍历，找出最大的元素，与数列尾端元素交换。遍历元素，内层循环。\n对除上述父元素尾端元素的子数列，重复上述操作。尾端下表依次减小，外层循环。\nJavaScript代码实现 1 2 3 4 5 6 7 8 9 10 11 12  function selectSort(nums){ for(var end=nums.length-1; end\u0026gt;0;end--){ var maxPos=0; //这里注意要有等号 因为数列的最大值有可能本来就在尾端位置  for(var i=0;i\u0026lt;=end;i++){ if(nums[i]\u0026gt;nums[maxPos]){ maxPos=i; } } [nums[maxPos],nums[end]]=[nums[end],nums[maxPos]]; } }   直接插入排序 算法思想： 从最小有序子数列出发，依次将最小子数列邻近的数字插入该有序子数列中。\n元素个数只有1的数列出发，若该数列邻近元素小于该数列尾端元素，则依次从尾端元素往前查找合适的插入位置并插入。从尾端元素起向前遍历，内层循环。\n将该子数列长度加1，重复上述操作。尾端下标依次向后移动一位，外层循环。\nJavaScript代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13  function insertionSort(nums){ for(var end=1;end\u0026lt;nums.length;end++){ if(nums[end]\u0026lt;nums[end-1]){ var temp=nums[end]; var j; for(j=end-1;j\u0026gt;=0 \u0026amp;\u0026amp; nums[j]\u0026gt;temp; j--){ nums[j+1]=nums[j]; } nums[j]=temp; } } return nums; }   希尔排序 希尔排序是第一个突破算法复杂度O(n2)的算法，是直接插入排序的升级版。希尔排序是将固定间隔为某interval的元素看作一组数列，对该数列进行直接插入排序。\n算法思想： JavaScript代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  function shellSort(nums){ var interval=Math.floor(nums.length/2) for(;interval\u0026gt;0;interval=Math.floor(interval/2)){ for(var end=interval; end\u0026lt;nums.length; end++){ if(nums[end]\u0026lt;nums[end-interval]){ var temp=nums[end]; var j; for(j=end-interval;j\u0026gt;=0\u0026amp;\u0026amp;nums[j]\u0026gt;temp;j-=interval){ nums[j+interval]=nums[j]; } nums[j]=temp; } } } return nums; }   快速排序 算法思想： 找一个基准数字，通过一趟排序，该基准数字的左边都比该数字小，右边都比该数字大。\n2020/12/1注：\n本文在迁移前，本来涉及LaTex数学公式。我尝试了很久想要使用Katex支持Latex，但是最终还是无法正确地使用$渲染LaTex。\n","description":"","id":13,"section":"posts","tags":["算法"],"title":"经典排序算法","uri":"https://moyahuang.github.io/zh/posts/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"},{"content":"继承可以帮我们实现1. 代码重用 2. 以及进行规约？\nJS的对象采用原型继承(prototype-based inheritance)机制。当属性和方法添加到对象的原型上时，该对象及其后代便都会具备这些属性和方法。\n在其他诸如C语言等程序语言中，通常都有一个函数叫做构造函数(constructor)。构造函数就是为对象实例赋初值的。JS中没有类（ES6以前），普通函数(function)即可以用作构造函数，不过为了跟普通函数进行区分，一般会把用作构造函数的普通函数名首字母大写。\n当定义了这样一个函数（类）时\n当定义了这样一个函数（类）时\n1  function Crane(a, b){}   JS会为Crane.prototype增加一个属性constructor，其值指向刚才定义的方法（对象）或构造函数（以下统称为构造函数）本身，并且该构造函数还包括下面几个属性\n1  Crane.prototype={constructor: this}   用一张图可以表示为\n\n同时，构造函数本身也有constructor属性，这个属性指向Function构造函数\n\n注：ES6引入了关键词class，JS也可以像其他语言一样在class内部作用域定义构造函数。\n构造函数模式如何继承（下面的分类待斟酌，实质性区别是什么？） 使用Parent.call 上面提到的构造函数使用关键词new即可创建对象，这种模式怎样实现继承呢？我们看到下面的例子\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  function Bird(type, color){ this.type=type; this.color=color; this.fly=function(){ console.log(this.color+\u0026#39; \u0026#39;+this.type+\u0026#34; is flying!\u0026#34;); } } //Parrot也是鸟 它有所有Bird拥有的属性 function Parrot(type, color){ Bird.call(this, type, color); //继承鸟的所有属性和方法  this.talk=function(){ console.log(this.color+\u0026#39; \u0026#39;+this.type+\u0026#34; is talking!\u0026#34;) } } var prr=new Parrot(\u0026#34;鹦鹉\u0026#34;， \u0026#34;彩色de\u0026#34;); prr.talk(); prr.fly();   使用ES6的类关键词 ES6引入了类机制，使用关键词extends即可实现继承。上面的代码可以改成这样\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  class Bird{ constructor(type, color){ this.type=type; this.color=color; } fly(){ console.log(this.color+\u0026#39; \u0026#39;+this.type+\u0026#34; is flying!\u0026#34;); } } class Parrot extends Bird{ constructor(type, color){ super(type, color); } talk(){ ... } }   伪类模式（不推荐） 我认为伪类模式与上面的继承方法的不同点在于，子类的构造函数会包含所有的属性，而无法不会进行属性的传递。因其关键点在于将子类的原型设置为父类对象。下面看一个例子\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  var Mammal=function(name){ this.name=name; } //注意这里要采用加强prototype的方式添加方法 Mammal.prototype.get_name=function(){ return this.name; } Mammal.prototype.says=function(){ return this.saying||\u0026#39;\u0026#39;; } var Cat=function(name){ this.name=name; this.saying=\u0026#39;meow\u0026#39;; } Cat.prototype=new Mammal(); Cat.prototype.get_name=function(){ return this.says()+\u0026#39; \u0026#39;+this.name;//调用父类的方法 } var myCat=new Cat(\u0026#34;Katy\u0026#34;); console.log(myCat.get_name()); // \u0026#34;meow Katy\u0026#34;   当然，《JS语法精粹》里对上述的一些步骤进行了方法的封装，使程序表达性更高，隐藏了重复写prototype的一些”ugliness”。\n1 2 3 4 5  var Cat=function(name){ this.name=name; this.saying=\u0026#34;meow\u0026#34;; }.inherits(Mammal) .method(\u0026#34;get_name\u0026#34;,function(){...});   其中inherits是这么定义的\n1 2 3 4  Function.method(\u0026#34;inherits\u0026#34;,function(Parent){ this.prototype=new Parent(); return this; })   Function.method也是《JS语法精粹》定义的一个方法，常常用到，这里我写一遍算是复习了\n1 2 3 4 5 6  Function.prototype.method=function(name, func){ if(this.prototype[name]!==\u0026#34;function\u0026#34;){ this.prototype[name]=func; return this; } }   伪类模式的缺点： 原型模式 原型语言的好处是我们可以从一个原有的对象的基础上创建更多其他类似但又有所不同的对象，从而免除了将一个系统抽象类的过程。\n首先我们要做的就是创建一个对象\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  var myMammal={ name: \u0026#34;mammal\u0026#34;, get_name: function(){ return this.name; } says: function(){ return this.saying || \u0026#39;\u0026#39;; } } var myCat=Object.create(myMammal); myCat.name=\u0026#34;Siamese\u0026#34;; myCat.saying=\u0026#34;meow\u0026#34;; myCat.get_name=function(){ return this.says+\u0026#34; \u0026#34;+this.name; }   其中Object.create是《JS语言精粹》定义的一个方法，其作用是返回一个以参数对象为原型的新对象，下面来复习一遍\n1 2 3 4 5 6 7  if(typeof Object.create !== \u0026#39;function\u0026#39;){ Object.create=function(o){ var F=function(){}; F.prototype=o; return new F(); } }   上面的这种方式叫做差异化继承(differential inheritance)\n函数模式 上面所述的继承模式的缺点是，对象的所有属性和方法都暴露在外。采用函数模式可以克服上述缺点。\n首先我们要创建一个函数，用于生产新的对象。但是因为我们不需要用new来调用这个函数，所以该方法首字母小写。创建这个函数可以分为四个步骤：\n 创建一个新对象(任何方式都可以) 定义一些（私有的）变量和方法（在函数内部定义的变量和方法都是私有的，所以给私有加了括号） 为创建的新对象添加特权方法 返回新对象  这是书上的伪代码模板\n1 2 3 4 5 6 7  var constructor=function(spec, my){ var that, other private instance variables; my = my || {}; that = a new object; Add privileged methods to that return that; }   其中参数spec包含构造新实例的所有信息，而这个参数最好为本章节前提的object specifier，因为这样不用每次传入一个包含所有参数的完整对象。\n参数my是继承链上所有函数构造器共享的私有资源。（？是不是类似于保护类）\n下面继续用这种模式实现我们的示例，下面创建了一个父类对象\n1 2 3 4 5 6 7 8 9 10 11 12  var mammal=function(spec){ var that={};//创建新对象  that.get_name=function(){//为新对象添加特权方法  return spec.name; } that.says=function(){ return spec.saying || \u0026#39;\u0026#39;; } return that;//返回新对象 }; var myMamma=mammal({name: \u0026#39;mammal\u0026#39;});   其子类对象\n1 2 3 4 5 6 7 8  var cat=function(spec){ spec.saying=spec.saying||\u0026#39;\u0026#39;; var that=mammal(spec);//创建新对象  that.get_name=function(){//为新对象添加特权方法  return spec.says()+\u0026#39; \u0026#39;+spec.name; } return that; }   ❓ 书中定义的superior方法我不知道用来干嘛的\n组件？ 参考资料   https://www.freecodecamp.org/news/a-guide-to-prototype-based-class-inheritance-in-javascript-84953db26df0/\n  《JS语法精粹》\n  ","description":"","id":15,"section":"posts","tags":["前端","JavaScript"],"title":"JS的继承是个啥玩意儿","uri":"https://moyahuang.github.io/zh/posts/js%E7%9A%84%E7%BB%A7%E6%89%BF%E6%98%AF%E4%B8%AA%E5%95%A5%E7%8E%A9%E6%84%8F%E5%84%BF/"}]