[{"content":"本站为莫莫哒的博客2.0, 重建于2020年12月1日。创建目的在于记录自己的学习历程，整理自己的一些思考，以及保存一些需要公开访问路径的内容。莫莫哒本人认为无论是学习还是生活，都需要留下一些痕迹，且尝试过日记，手账，剪贴簿，手机自带备忘录，语音日记，日记软件，包括微博、豆瓣、微信等社交软件。未来也不排除在这里记录一些生活和兴趣爱好相关的内容。\n可能有一天我会发现我以前的博客写得像💩一样，或者本人过往的思维方式特别怪异，但如果不开始，那么永远都不会有进步。\nThis website is recreated in Dec. 1, 2020, for I personally like dark themes better these days. And I would like to give a thumbs up to the theme designer.\nI planned to migrate previous posts from Hexo-powered project to this brand new Hugo-powered project. But the migration task had been proven tedious and meaningless after I saved those pages to my Evernote.\nI hope this website would be long maintained by myself. For furter instruction on this theme, please refer to Hugo and 📝\n","description":"Moya Huang's personal website, Miao Huang, 黄苗, 四川大学, 四川师范大学, 前端","id":2,"section":"","tags":null,"title":"About","uri":"https://moyahuang.github.io/en/about/"},{"content":"Objects  what is an object? simple types of JS why are numbers, strings and booleans object-like? how to add a create method to the Object function?  1 2 3 4 5 6 7  if(typeof Object.create !== \u0026#39;function\u0026#39;){ Object.create=function(o){ var F=function(){}; F.prototype=o; return new F(); } }   -what is an object literal?\nFunctions  what is the difference between a function and an object what is a function literal what is anonymous function what is a closure what are the two additional parameters that a function has what determines the value of this parameter what are the four patterns of invocation  Method invocation pattern  Method invocation pattern is a method that is defined as a property of an object, for example  1 2 3 4 5 6  var myObject={ value: 0, increment: function(inc){ this.value+=typeof inc===\u0026#39;number\u0026#39;?inc:1; } };   And the methods is invoked when using dot expression or [subscript] expression, like this\n1 2 3 4 5 6 7 8 9 10 11 12  //invocation method one myObject.increment(); //invacation method two myObject[\u0026#39;increment\u0026#39;](2); The parameter this is only bound when the function is invoked , also referred as late binding. Methods can use this to access the object context so that it can retrieve the values from the object or modify the object. ### Function invocation pattern? When a function is invoked in this way ```javascript var sum=add(1, 2);   this is bound to the global object, which is a design error of the language.\nBut this is not expected when the function is used as a inner function. You suppose this is pointed to the outer function, but it is not.\n1 2 3 4 5 6 7 8 9 10 11  var value=2; var myNum={ value: 1 } myNum.double=function(){ var helper=function(){ this.value=add(this.value, this.value);//this here indicates the global object  } helper(); } console.log(myNum.value); //4   So the situation above is not what we wanted, we can implement a simple workaround technique like this\n1 2 3 4 5 6 7 8  myNum.double=function(){ var that=this; //use another variable to store the context  var helper=function(){ that.value=add(that.value, that.value);//this here indicates the global object  } helper(); } console.log(myNum.value);//2   Constructor invocation pattern what is a prototypal inheritance language\nWhen a function is invoked with the new prefix, a new object is created with a hidden link to the value of the function’s prototype member. And this is bound to the new object.\nAnd by convention, such function is capitalized.\n1 2 3 4 5 6 7 8  var Person=function(name){ this._name=name; } Person.prototype.getName=function(){ return this._name; } var mike=new Person(\u0026#34;Michael\u0026#34;) console.log(mike.getName());   Apply invocation pattern An method from an object can be applied in another object when they have the same property names. It can be used in this way: 1. an object’s method is 2. applied to 3. another object\n1 2 3 4 5 6 7 8 9 10 11  var Animal={ bark:function(){ console.log(this.sound); } } var dog={ sound: \u0026#34;wang\u0026#34; } Animal.bark.apply(dog);   In this situation, this is applied to the parameter of the apply function.\nReturn what does return do\nif no return value is specified, what will be returned\nwhen a function is invoked with new and the return value is not an object, what will be returned?\nExceptions how to throw an exception\nhow to catch an exception\nAugmenting Types define a method that helps us make augmenting methods\nthe basic types of JS can be augmented. To make an example\n1 2 3 4 5 6 7  //this method can hide the ugliness of the using of \u0026#39;prototype\u0026#39; Function.prototype.method=function(name,func){ if(!this.prototype[name]){ this.prototype[name]=func\u0026#39;; return this; } }   Once the Function is augmented, we can invoke the method with other basic types. For example, we sometimes need to extract the Integer part of a number.\n1 2 3 4 5  Number.method(\u0026#34;integer\u0026#34;, function(){ return Math[this\u0026lt;0\u0026#39;ceil\u0026#39;:\u0026#39;floor\u0026#39;](this);//unload }); console.log((-1.6).integer());//load   Or we need to get rid of the white spaces at the start/end of a word\n1 2 3  String.method(\u0026#34;trim\u0026#34;,function(){ return this.replace(/^\\s+|\\s$/g, \u0026#39;\u0026#39;); })   Memoization please make a function that helps making memoized functions like fibonacci and factorial\nArray what would happen if the length of an array object is set to be larger than the actual value?\nwhat if the length is set to be smaller?\nhow to append new element to an array？\nhow to correctly delete an element of an array?\nhow to enumerate the elements of an array in order?\nto avoid failures to identify arrays that were constructed in a different window or frame, how to define the function\n1 2 3  var is_array=function(value){ return Object.prototype.toString.apply(value); }   please define a function that creates a matrix and another function that creates an identity matrix\nhow to define a comparison function that sorts an array of numbers?\nnote: imagine the middle point of the two parameters as the origin, return negative if the left parameter should come first, return positive if otherwise.\nplease define a method that sort an array of objects by taking a member name\nString what’s the difference between string.match(regexp) and regexp.match(string) p89\n❓\nit is said that for in statement can loop over all of the property names in an object, but by my observation, only the properties owned by the object will be visited.\n“if a particular order of properties is required, avoid the for in statement entirely” but it is listed in order\nwhat is the difference between a function and a method?\nwhat values can be produced by typeof\n","description":"javascript,the good parts","id":3,"section":"posts","tags":["JavaScript"],"title":"JavaScript--the good parts","uri":"https://moyahuang.github.io/en/posts/javascript--the-good-parts/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":5,"section":"gallery","tags":null,"title":"Photo","uri":"https://moyahuang.github.io/en/gallery/photo/"}]